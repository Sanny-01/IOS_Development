//
//  CountryWeatherInteractor.swift
//  Sandro Giorgishvili 28
//
//  Created by TBC on 02.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CountryWeatherBusinessLogic
{
    func getCountryWeather()
}

protocol CountryWeatherDataStore
{
  var selectedCountry: Country { get }
}

class CountryWeatherInteractor: CountryWeatherDataStore
{
    // MARK: - Clean Components
    private (set) var selectedCountry: Country
    // TODO: MAYBE CHANGE THIS LINE
    var currentCountryWeather: CountryMainWeather!
    
    private let presenter: CountryWeatherPresentationLogic
    private let worker: CountryWeatherWorkerLogic
    
    // MARK: - Object Lifecycle
    
    init(presenter: CountryWeatherPresentationLogic, worker: CountryWeatherWorkerLogic, selectedCountry: Country) {
        self.presenter = presenter
        self.worker = worker
        self.selectedCountry = selectedCountry
    }

  // MARK: Do something
}

extension CountryWeatherInteractor: CountryWeatherBusinessLogic {
    func getCountryWeather() {
        Task {
            do {
                let countryWeather = try await worker.fetchCountryWeather(request: CountryWeather.ShowCountryWeather.Request(laltitude: selectedCountry.laltitude, longitude: selectedCountry.laltitude))
                DispatchQueue.main.async { [weak self] in
                    self?.currentCountryWeather = countryWeather
                    self?.presenter.presentCountryWeather(response: CountryWeather.ShowCountryWeather.Response(countryWeahterData: countryWeather))
                }
            } catch {
                // TODO: - Add Error handling
            }
        }
    }
}
